{"meta":{"title":"Salieri的技术小栈","subtitle":"","description":"","author":"Salieri","url":"https://blog.hcatek.com","root":"/"},"posts":[{"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.hcatek.com/tags/linux/"},{"name":"gdb","slug":"gdb","permalink":"https://blog.hcatek.com/tags/gdb/"},{"name":"openocd","slug":"openocd","permalink":"https://blog.hcatek.com/tags/openocd/"}],"title":"openocd+gdb调试指北（riscv）","date":"2020/07/30","text":"openocd配置好openocd的配置文件如下所示，更改调试速度，接口类型，usb设备pid等信息。保存为debug.cfg文件 adapter_khz 1000interface ftdiftdi_device_desc \"Digilent USB Device\"ftdi_vid_pid 0x0403 0x6014ftdi_channel 0ftdi_layout_init 0x00e8 0x60ebreset_config noneset _CHIPNAME riscvjtag newtap $_CHIPNAME cpu -irlen 5set _TARGETNAME $_CHIPNAME.cputarget create $_TARGETNAME riscv -chain-position $_TARGETNAME -coreid 0gdb_report_data_abort enablegdb_report_register_access_error enableriscv set_reset_timeout_sec 120riscv set_command_timeout_sec 120riscv set_prefer_sba offinithaltecho \"Ready for Remote Connections\" 使用openocd连接待调试设备 openocd -f debug.cfg 连接上的话终端中会输出下面的内容 Open On-Chip Debugger 0.10.0+dev-00195-g933cb87 (2020-06-15-20:32)Licensed under GNU GPL v2For bug reports, read http://openocd.org/doc/doxygen/bugs.htmladapter speed: 1000 kHzInfo : auto-selecting first available session transport \"jtag\". To override use 'transport select '.Info : clock speed 1000 kHzInfo : TAP riscv.cpu does not have IDCODEInfo : datacount=2 progbufsize=8Info : Examined RISC-V core; found 1 hartsInfo : hart 0: XLEN=64, misa=0x8000000000141105Info : Listening on port 3333 for gdb connectionsReady for Remote ConnectionsInfo : Listening on port 6666 for tcl connectionsInfo : Listening on port 4444 for telnet connections 连接上openocd之后就可以使用gdb/tcl/telnet调试了，新建一个终端，输入riscv64-unknown-elf-gdb进入gdb。后面我以一个实际应用场景为例来说明。以上图的内存映射为例，这是一个运行linux的某开源64位riscv处理器。整个系统的boot流程可大致简化为在这套系统中，bootrom为fpga例化的片内sram，用来存储sd卡拷贝的代码以及linux设备树。而sd卡中存放bootloader以及linux镜像。 场景模拟我们假定gdb调试需求为，不拷贝sd卡中内容，直接使用gdb把bootloader和linux镜像加载进ddr中，并且替换bootrom中设备树文件。 连接openocdopenocd -f debug.cfg 连接gdb创建一个新的终端,输入riscv64-unknown-elf-gdb进入gdb。随后在gdb的命令行中经行如下操作 target remote localhost:3333 ## 连接调试设备file /folder/filename ## gdb打开要加载的sd卡内容load ## 把Linux镜像加load进ddr中layout asm ## gdb终端中显示汇源源码set $pc=0x10ac8 ## 把pc指针设到需要加载linux设备树的地址si ## 单步执行b boot_other_hart ## 在boot_other_hart语句出设置断点c ## 全速执行，一直执行到断点处restore /folder/filename.dtb binary 0x81200000 ## 加载设备树文件c 此段涉及到文件路径，地址等命令都是伪代码，毕竟是实际例子来讲解，各位自行替换。大致理解不同命令起什么作用就行。更多gdb命令请自行查阅相关文档。 自动化配置除此之外，可能会觉得gdb里面输这么多指令肯定很麻烦。可以新建一个文本文件（如gdbinit），将gdb命令都放进去。运行gdb时候使用-x参数。 riscv64-unknown-elf-gdb -x /folder/gdbinit 同样的openocd还可以配合telnet等工具使用，各位自行发掘 结语我写博客主要目的是强化自己记忆力，假使有遇到相同难题，欢迎留言交流。","permalink":"https://blog.hcatek.com/2020/07/30/gdb-200730/","photos":[]},{"tags":[{"name":"git","slug":"git","permalink":"https://blog.hcatek.com/tags/git/"},{"name":"linux","slug":"linux","permalink":"https://blog.hcatek.com/tags/linux/"}],"title":"git备忘录","date":"2020/07/28","text":"管理员视角场景一忍受不了github的网速/不放心代码托管平台的数据安全/无所谓图形化界面。 创建本地git远程仓库充当git服务器 sudo git init --bare repo.git 考虑到可能会多人使用（实验室、小公司），把仓库所有者设置为多人用户组 chown -R git:groupname repo.git 变更读写权限 chomod -R 775 repo.git 变更目录属性，让此目录下创建的文件继承该目录属性。参考setuid 没有这一步其他用户无法对仓库操作 cd repo.gitchmod g+rws objects/chmod g+rws refs/ 修改git仓库配置文件vim repo.git/config。在最后一行添加sharedRepository = 1。切换至其他用户测试git仓库。 此方式创建的git仓库，可以局域网共享。使用方式为 git clone ipaddress:/repo.gitcd repo.gitgit remote remove origingit remote add origin username@ipaddress:/repo.git 场景二场景一的基础上条件上，希望能使用图形界面。 配置gitlab-ce。参考Docker+gitlab搭建自己的代码仓库。 用户视角git快速上手 创建git仓库 mkdir testrepocd testrepogit initgit config user.name \"name\"git config user.email \"name@domain.com\" 配置user.names/email时可选--global参数，全局配置。 常用命令 命令 功能描述 git add 添加到暂存区 git status 查看当前暂存区状态 git commit 添加commit git log 查看历史commit git remote 配置远程仓库 git push 推送 git pull 拉取 git checkout 操作分支 参看各类教程，掌握以上几个命令，即可完成git常用操作。 遇事不决git cmd --help git目录下的一些配置解读 文件名 功能 .gitignore 忽视指定文件/目录 .gitmodule 在git仓库中添加其他仓库作为子模块","permalink":"https://blog.hcatek.com/2020/07/28/git-200729/","photos":[]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.hcatek.com/tags/linux/"},{"name":"gdb","slug":"gdb","permalink":"https://blog.hcatek.com/tags/gdb/"},{"name":"openocd","slug":"openocd","permalink":"https://blog.hcatek.com/tags/openocd/"},{"name":"git","slug":"git","permalink":"https://blog.hcatek.com/tags/git/"}]}